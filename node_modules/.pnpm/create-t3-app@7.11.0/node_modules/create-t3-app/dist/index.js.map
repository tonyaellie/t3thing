{"version":3,"sources":["../src/index.ts","../src/installers/envVars.ts","../src/consts.ts","../src/installers/nextAuth.ts","../src/utils/addPackageDependency.ts","../src/installers/dependencyVersionMap.ts","../src/installers/prisma.ts","../src/installers/tailwind.ts","../src/installers/trpc.ts","../src/installers/index.ts","../src/cli/index.ts","../src/utils/getT3Version.ts","../src/utils/getUserPkgManager.ts","../src/utils/logger.ts","../src/utils/validateAppName.ts","../src/utils/validateImportAlias.ts","../src/helpers/createProject.ts","../src/helpers/installPackages.ts","../src/helpers/scaffoldProject.ts","../src/helpers/selectBoilerplate.ts","../src/helpers/git.ts","../src/helpers/setImportAlias.ts","../src/helpers/logNextSteps.ts","../src/utils/parseNameAndPath.ts","../src/utils/renderTitle.ts","../src/utils/renderVersionWarning.ts","../src/helpers/installDependencies.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { type PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { runCli } from \"~/cli/index.js\";\nimport { createProject } from \"~/helpers/createProject.js\";\nimport { initializeGit } from \"~/helpers/git.js\";\nimport { setImportAlias } from \"~/helpers/setImportAlias.js\";\nimport { logNextSteps } from \"~/helpers/logNextSteps.js\";\nimport { buildPkgInstallerMap } from \"~/installers/index.js\";\nimport { logger } from \"~/utils/logger.js\";\nimport { parseNameAndPath } from \"~/utils/parseNameAndPath.js\";\nimport { renderTitle } from \"~/utils/renderTitle.js\";\nimport {\n  getNpmVersion,\n  renderVersionWarning,\n} from \"./utils/renderVersionWarning.js\";\nimport { installDependencies } from \"./helpers/installDependencies.js\";\nimport { getVersion } from \"./utils/getT3Version.js\";\n\ntype CT3APackageJSON = PackageJson & {\n  ct3aMetadata?: {\n    initVersion: string;\n  };\n};\n\nconst main = async () => {\n  const npmVersion = await getNpmVersion();\n  renderTitle();\n  npmVersion && renderVersionWarning(npmVersion);\n\n  const {\n    appName,\n    packages,\n    flags: { noGit, noInstall, importAlias },\n  } = await runCli();\n\n  const usePackages = buildPkgInstallerMap(packages);\n\n  // e.g. dir/@mono/app returns [\"@mono/app\", \"dir/app\"]\n  const [scopedAppName, appDir] = parseNameAndPath(appName);\n\n  const projectDir = await createProject({\n    projectName: appDir,\n    packages: usePackages,\n    importAlias: importAlias,\n    noInstall,\n  });\n\n  // Write name to package.json\n  const pkgJson = fs.readJSONSync(\n    path.join(projectDir, \"package.json\"),\n  ) as CT3APackageJSON;\n  pkgJson.name = scopedAppName;\n  pkgJson.ct3aMetadata = { initVersion: getVersion() };\n  fs.writeJSONSync(path.join(projectDir, \"package.json\"), pkgJson, {\n    spaces: 2,\n  });\n\n  // update import alias in any generated files if not using the default\n  if (importAlias !== \"~/\") {\n    setImportAlias(projectDir, importAlias);\n  }\n\n  if (!noInstall) {\n    await installDependencies({ projectDir });\n  }\n\n  // Rename _eslintrc.json to .eslintrc.json - we use _eslintrc.json to avoid conflicts with the monorepos linter\n  fs.renameSync(\n    path.join(projectDir, \"_eslintrc.cjs\"),\n    path.join(projectDir, \".eslintrc.cjs\"),\n  );\n\n  if (!noGit) {\n    await initializeGit(projectDir);\n  }\n\n  logNextSteps({ projectName: appDir, packages: usePackages, noInstall });\n\n  process.exit(0);\n};\n\nmain().catch((err) => {\n  logger.error(\"Aborting installation...\");\n  if (err instanceof Error) {\n    logger.error(err);\n  } else {\n    logger.error(\n      \"An unknown error has occurred. Please open an issue on github with the below:\",\n    );\n    console.log(err);\n  }\n  process.exit(1);\n});\n","import { type Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const envVariablesInstaller: Installer = ({ projectDir, packages }) => {\n  const usingAuth = packages?.nextAuth.inUse;\n  const usingPrisma = packages?.prisma.inUse;\n\n  const envContent = getEnvContent(!!usingAuth, !!usingPrisma);\n\n  const envFile =\n    usingAuth && usingPrisma\n      ? \"with-auth-prisma.mjs\"\n      : usingAuth\n      ? \"with-auth.mjs\"\n      : usingPrisma\n      ? \"with-prisma.mjs\"\n      : \"\";\n\n  if (envFile !== \"\") {\n    const envSchemaSrc = path.join(\n      PKG_ROOT,\n      \"template/extras/src/env\",\n      envFile,\n    );\n    const envSchemaDest = path.join(projectDir, \"src/env.mjs\");\n    fs.copySync(envSchemaSrc, envSchemaDest);\n  }\n\n  const envDest = path.join(projectDir, \".env\");\n  const envExampleDest = path.join(projectDir, \".env.example\");\n\n  fs.writeFileSync(envDest, envContent, \"utf-8\");\n  fs.writeFileSync(envExampleDest, exampleEnvContent + envContent, \"utf-8\");\n};\n\nconst getEnvContent = (usingAuth: boolean, usingPrisma: boolean) => {\n  let content = `\n# When adding additional environment variables, the schema in \"/src/env.mjs\"\n# should be updated accordingly.\n`\n    .trim()\n    .concat(\"\\n\");\n\n  if (usingPrisma)\n    content += `\n# Prisma\n# https://www.prisma.io/docs/reference/database-reference/connection-urls#env\nDATABASE_URL=\"file:./db.sqlite\"\n`;\n\n  if (usingAuth)\n    content += `\n# Next Auth\n# You can generate a new secret on the command line with:\n# openssl rand -base64 32\n# https://next-auth.js.org/configuration/options#secret\n# NEXTAUTH_SECRET=\"\"\nNEXTAUTH_URL=\"http://localhost:3000\"\n\n# Next Auth Discord Provider\nDISCORD_CLIENT_ID=\"\"\nDISCORD_CLIENT_SECRET=\"\"\n`;\n\n  if (!usingAuth && !usingPrisma)\n    content += `\n# Example:\n# SERVERVAR=\"foo\"\n# NEXT_PUBLIC_CLIENTVAR=\"bar\"\n`;\n\n  return content;\n};\n\nconst exampleEnvContent = `\n# Since the \".env\" file is gitignored, you can use the \".env.example\" file to\n# build a new \".env\" file when you clone the repo. Keep this file up-to-date\n# when you add new variables to \\`.env\\`.\n\n# This file will be committed to version control, so make sure not to have any\n# secrets in it. If you are cloning this repo, create a copy of this file named\n# \".env\" and populate it with your secrets.\n`\n  .trim()\n  .concat(\"\\n\\n\");\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// With the move to TSUP as a build tool, this keeps path routes in other files (installers, loaders, etc) in check more easily.\n// Path is in relation to a single index.js file inside ./dist\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\nexport const PKG_ROOT = path.join(distPath, \"../\");\n\n//export const PKG_ROOT = path.dirname(require.main.filename);\n\nexport const TITLE_TEXT = `   ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n  / __| _ \\\\ __| /  \\\\_   _| __| |_   _|__ /   /  \\\\ | _ \\\\ _ \\\\\n | (__|   / _| / /\\\\ \\\\| | | _|    | |  |_ \\\\  / /\\\\ \\\\|  _/  _/\n  \\\\___|_|_\\\\___|_/‾‾\\\\_\\\\_| |___|   |_| |___/ /_/‾‾\\\\_\\\\_| |_|\n`;\nexport const DEFAULT_APP_NAME = \"my-t3-app\";\nexport const CREATE_T3_APP = \"create-t3-app\";\n","import { type Installer } from \"~/installers/index.js\";\nimport { type AvailableDependencies } from \"~/installers/dependencyVersionMap.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { addPackageDependency } from \"~/utils/addPackageDependency.js\";\n\nexport const nextAuthInstaller: Installer = ({ projectDir, packages }) => {\n  const usingPrisma = packages?.prisma.inUse;\n  const deps: AvailableDependencies[] = [\"next-auth\"];\n  if (usingPrisma) deps.push(\"@next-auth/prisma-adapter\");\n\n  addPackageDependency({\n    projectDir,\n    dependencies: deps,\n    devMode: false,\n  });\n\n  const extrasDir = path.join(PKG_ROOT, \"template/extras\");\n\n  const apiHandlerFile = \"src/pages/api/auth/[...nextauth].ts\";\n  const apiHandlerSrc = path.join(extrasDir, apiHandlerFile);\n  const apiHandlerDest = path.join(projectDir, apiHandlerFile);\n\n  const authConfigSrc = path.join(\n    extrasDir,\n    \"src/server/auth\",\n    usingPrisma ? \"with-prisma.ts\" : \"base.ts\",\n  );\n  const authConfigDest = path.join(projectDir, \"src/server/auth.ts\");\n\n  fs.copySync(apiHandlerSrc, apiHandlerDest);\n  fs.copySync(authConfigSrc, authConfigDest);\n};\n","import path from \"path\";\nimport fs from \"fs-extra\";\nimport { type PackageJson } from \"type-fest\";\nimport {\n  dependencyVersionMap,\n  type AvailableDependencies,\n} from \"~/installers/dependencyVersionMap.js\";\nimport sortPackageJson from \"sort-package-json\";\n\nexport const addPackageDependency = (opts: {\n  dependencies: AvailableDependencies[];\n  devMode: boolean;\n  projectDir: string;\n}) => {\n  const { dependencies, devMode, projectDir } = opts;\n\n  const pkgJson = fs.readJSONSync(\n    path.join(projectDir, \"package.json\"),\n  ) as PackageJson;\n\n  dependencies.forEach((pkgName) => {\n    const version = dependencyVersionMap[pkgName];\n\n    if (devMode && pkgJson.devDependencies) {\n      pkgJson.devDependencies[pkgName] = version;\n    } else if (pkgJson.dependencies) {\n      pkgJson.dependencies[pkgName] = version;\n    }\n  });\n  const sortedPkgJson = sortPackageJson(pkgJson);\n\n  fs.writeJSONSync(path.join(projectDir, \"package.json\"), sortedPkgJson, {\n    spaces: 2,\n  });\n};\n","/*\n * This maps the necessary packages to a version.\n * This improves performance significantly over fetching it from the npm registry.\n */\nexport const dependencyVersionMap = {\n  // NextAuth.js\n  \"next-auth\": \"^4.21.0\",\n  \"@next-auth/prisma-adapter\": \"^1.0.5\",\n\n  // Prisma\n  prisma: \"^4.11.0\",\n  \"@prisma/client\": \"^4.11.0\",\n\n  // TailwindCSS\n  tailwindcss: \"^3.3.0\",\n  autoprefixer: \"^10.4.14\",\n  postcss: \"^8.4.21\",\n  prettier: \"^2.8.6\",\n  \"prettier-plugin-tailwindcss\": \"^0.2.6\",\n  \"@types/prettier\": \"^2.7.2\",\n\n  // tRPC\n  \"@trpc/client\": \"^10.18.0\",\n  \"@trpc/server\": \"^10.18.0\",\n  \"@trpc/react-query\": \"^10.18.0\",\n  \"@trpc/next\": \"^10.18.0\",\n  \"@tanstack/react-query\": \"^4.28.0\",\n  superjson: \"1.12.2\",\n} as const;\nexport type AvailableDependencies = keyof typeof dependencyVersionMap;\n","import { type PackageJson } from \"type-fest\";\nimport { type Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { addPackageDependency } from \"~/utils/addPackageDependency.js\";\n\nexport const prismaInstaller: Installer = ({ projectDir, packages }) => {\n  addPackageDependency({\n    projectDir,\n    dependencies: [\"prisma\"],\n    devMode: true,\n  });\n  addPackageDependency({\n    projectDir,\n    dependencies: [\"@prisma/client\"],\n    devMode: false,\n  });\n\n  const extrasDir = path.join(PKG_ROOT, \"template/extras\");\n\n  const schemaSrc = path.join(\n    extrasDir,\n    \"prisma/schema\",\n    packages?.nextAuth.inUse ? \"with-auth.prisma\" : \"base.prisma\",\n  );\n  const schemaDest = path.join(projectDir, \"prisma/schema.prisma\");\n\n  const clientSrc = path.join(extrasDir, \"src/server/db.ts\");\n  const clientDest = path.join(projectDir, \"src/server/db.ts\");\n\n  // add postinstall script to package.json\n  const packageJsonPath = path.join(projectDir, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n  packageJsonContent.scripts = {\n    ...packageJsonContent.scripts,\n    postinstall: \"prisma generate\",\n  };\n\n  fs.copySync(schemaSrc, schemaDest);\n  fs.copySync(clientSrc, clientDest);\n  fs.writeJSONSync(packageJsonPath, packageJsonContent, {\n    spaces: 2,\n  });\n};\n","import fs from \"fs-extra\";\nimport path from \"path\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { type Installer } from \"~/installers/index.js\";\nimport { addPackageDependency } from \"~/utils/addPackageDependency.js\";\n\nexport const tailwindInstaller: Installer = ({ projectDir }) => {\n  addPackageDependency({\n    projectDir,\n    dependencies: [\n      \"tailwindcss\",\n      \"postcss\",\n      \"autoprefixer\",\n      \"prettier\",\n      \"prettier-plugin-tailwindcss\",\n      \"@types/prettier\",\n    ],\n    devMode: true,\n  });\n\n  const extrasDir = path.join(PKG_ROOT, \"template/extras\");\n\n  const twCfgSrc = path.join(extrasDir, \"config/tailwind.config.ts\");\n  const twCfgDest = path.join(projectDir, \"tailwind.config.ts\");\n\n  const postcssCfgSrc = path.join(extrasDir, \"config/postcss.config.cjs\");\n  const postcssCfgDest = path.join(projectDir, \"postcss.config.cjs\");\n\n  const prettierSrc = path.join(extrasDir, \"config/prettier.config.cjs\");\n  const prettierDest = path.join(projectDir, \"prettier.config.cjs\");\n\n  const cssSrc = path.join(extrasDir, \"src/styles/globals.css\");\n  const cssDest = path.join(projectDir, \"src/styles/globals.css\");\n\n  fs.copySync(twCfgSrc, twCfgDest);\n  fs.copySync(postcssCfgSrc, postcssCfgDest);\n  fs.copySync(cssSrc, cssDest);\n  fs.copySync(prettierSrc, prettierDest);\n\n  // Remove vanilla css file\n  const indexModuleCss = path.join(projectDir, \"src/pages/index.module.css\");\n  fs.unlinkSync(indexModuleCss);\n};\n","import fs from \"fs-extra\";\nimport path from \"path\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { addPackageDependency } from \"~/utils/addPackageDependency.js\";\nimport { type Installer } from \"~/installers/index.js\";\n\nexport const trpcInstaller: Installer = ({ projectDir, packages }) => {\n  addPackageDependency({\n    projectDir,\n    dependencies: [\n      \"@tanstack/react-query\",\n      \"superjson\",\n      \"@trpc/server\",\n      \"@trpc/client\",\n      \"@trpc/next\",\n      \"@trpc/react-query\",\n    ],\n    devMode: false,\n  });\n\n  const usingAuth = packages?.nextAuth.inUse;\n  const usingPrisma = packages?.prisma.inUse;\n\n  const extrasDir = path.join(PKG_ROOT, \"template/extras\");\n\n  const apiHandlerSrc = path.join(extrasDir, \"src/pages/api/trpc/[trpc].ts\");\n  const apiHandlerDest = path.join(projectDir, \"src/pages/api/trpc/[trpc].ts\");\n\n  const utilsSrc = path.join(extrasDir, \"src/utils/api.ts\");\n  const utilsDest = path.join(projectDir, \"src/utils/api.ts\");\n\n  const trpcFile =\n    usingAuth && usingPrisma\n      ? \"with-auth-prisma.ts\"\n      : usingAuth\n      ? \"with-auth.ts\"\n      : usingPrisma\n      ? \"with-prisma.ts\"\n      : \"base.ts\";\n  const trpcSrc = path.join(extrasDir, \"src/server/api/trpc\", trpcFile);\n  const trpcDest = path.join(projectDir, \"src/server/api/trpc.ts\");\n\n  const rootRouterSrc = path.join(extrasDir, \"src/server/api/root.ts\");\n  const rootRouterDest = path.join(projectDir, \"src/server/api/root.ts\");\n\n  const exampleRouterFile =\n    usingAuth && usingPrisma\n      ? \"with-auth-prisma.ts\"\n      : usingAuth\n      ? \"with-auth.ts\"\n      : usingPrisma\n      ? \"with-prisma.ts\"\n      : \"base.ts\";\n\n  const exampleRouterSrc = path.join(\n    extrasDir,\n    \"src/server/api/routers/example\",\n    exampleRouterFile,\n  );\n  const exampleRouterDest = path.join(\n    projectDir,\n    \"src/server/api/routers/example.ts\",\n  );\n\n  fs.copySync(apiHandlerSrc, apiHandlerDest);\n  fs.copySync(utilsSrc, utilsDest);\n  fs.copySync(trpcSrc, trpcDest);\n  fs.copySync(rootRouterSrc, rootRouterDest);\n  fs.copySync(exampleRouterSrc, exampleRouterDest);\n};\n","import { type PackageManager } from \"~/utils/getUserPkgManager.js\";\nimport { envVariablesInstaller } from \"~/installers/envVars.js\";\nimport { nextAuthInstaller } from \"~/installers/nextAuth.js\";\nimport { prismaInstaller } from \"~/installers/prisma.js\";\nimport { tailwindInstaller } from \"~/installers/tailwind.js\";\nimport { trpcInstaller } from \"~/installers/trpc.js\";\n\n// Turning this into a const allows the list to be iterated over for programatically creating prompt options\n// Should increase extensability in the future\nexport const availablePackages = [\n  \"nextAuth\",\n  \"prisma\",\n  \"tailwind\",\n  \"trpc\",\n  \"envVariables\",\n] as const;\nexport type AvailablePackages = (typeof availablePackages)[number];\n\nexport interface InstallerOptions {\n  projectDir: string;\n  pkgManager: PackageManager;\n  noInstall: boolean;\n  packages?: PkgInstallerMap;\n  projectName?: string;\n}\n\nexport type Installer = (opts: InstallerOptions) => void;\n\nexport type PkgInstallerMap = {\n  [pkg in AvailablePackages]: {\n    inUse: boolean;\n    installer: Installer;\n  };\n};\n\nexport const buildPkgInstallerMap = (\n  packages: AvailablePackages[],\n): PkgInstallerMap => ({\n  nextAuth: {\n    inUse: packages.includes(\"nextAuth\"),\n    installer: nextAuthInstaller,\n  },\n  prisma: {\n    inUse: packages.includes(\"prisma\"),\n    installer: prismaInstaller,\n  },\n  tailwind: {\n    inUse: packages.includes(\"tailwind\"),\n    installer: tailwindInstaller,\n  },\n  trpc: {\n    inUse: packages.includes(\"trpc\"),\n    installer: trpcInstaller,\n  },\n  envVariables: {\n    inUse: true,\n    installer: envVariablesInstaller,\n  },\n});\n","import { type AvailablePackages } from \"~/installers/index.js\";\nimport { availablePackages } from \"~/installers/index.js\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport inquirer from \"inquirer\";\nimport { CREATE_T3_APP, DEFAULT_APP_NAME } from \"~/consts.js\";\nimport { getVersion } from \"~/utils/getT3Version.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\nimport { logger } from \"~/utils/logger.js\";\nimport { validateAppName } from \"~/utils/validateAppName.js\";\nimport { validateImportAlias } from \"~/utils/validateImportAlias.js\";\n\ninterface CliFlags {\n  noGit: boolean;\n  noInstall: boolean;\n  default: boolean;\n  importAlias: string;\n\n  /** @internal Used in CI. */\n  CI: boolean;\n  /** @internal Used in CI. */\n  tailwind: boolean;\n  /** @internal Used in CI. */\n  trpc: boolean;\n  /** @internal Used in CI. */\n  prisma: boolean;\n  /** @internal Used in CI. */\n  nextAuth: boolean;\n}\n\ninterface CliResults {\n  appName: string;\n  packages: AvailablePackages[];\n  flags: CliFlags;\n}\n\nconst defaultOptions: CliResults = {\n  appName: DEFAULT_APP_NAME,\n  packages: [\"nextAuth\", \"prisma\", \"tailwind\", \"trpc\"],\n  flags: {\n    noGit: false,\n    noInstall: false,\n    default: false,\n    CI: false,\n    tailwind: false,\n    trpc: false,\n    prisma: false,\n    nextAuth: false,\n    importAlias: \"~/\",\n  },\n};\n\nexport const runCli = async () => {\n  const cliResults = defaultOptions;\n\n  const program = new Command().name(CREATE_T3_APP);\n\n  // TODO: This doesn't return anything typesafe. Research other options?\n  // Emulate from: https://github.com/Schniz/soundtype-commander\n  program\n    .description(\"A CLI for creating web applications with the t3 stack\")\n    .argument(\n      \"[dir]\",\n      \"The name of the application, as well as the name of the directory to create\",\n    )\n    .option(\n      \"--noGit\",\n      \"Explicitly tell the CLI to not initialize a new git repo in the project\",\n      false,\n    )\n    .option(\n      \"--noInstall\",\n      \"Explicitly tell the CLI to not run the package manager's install command\",\n      false,\n    )\n    .option(\n      \"-y, --default\",\n      \"Bypass the CLI and use all default options to bootstrap a new t3-app\",\n      false,\n    )\n    /** START CI-FLAGS */\n    /**\n     * @experimental Used for CI E2E tests. If any of the following option-flags are provided, we\n     *               skip prompting.\n     */\n    .option(\"--CI\", \"Boolean value if we're running in CI\", false)\n    /** @experimental - Used for CI E2E tests. Used in conjunction with `--CI` to skip prompting. */\n    .option(\n      \"--tailwind [boolean]\",\n      \"Experimental: Boolean value if we should install Tailwind CSS. Must be used in conjunction with `--CI`.\",\n      (value) => !!value && value !== \"false\",\n    )\n    /** @experimental Used for CI E2E tests. Used in conjunction with `--CI` to skip prompting. */\n    .option(\n      \"--nextAuth [boolean]\",\n      \"Experimental: Boolean value if we should install NextAuth.js. Must be used in conjunction with `--CI`.\",\n      (value) => !!value && value !== \"false\",\n    )\n    /** @experimental - Used for CI E2E tests. Used in conjunction with `--CI` to skip prompting. */\n    .option(\n      \"--prisma [boolean]\",\n      \"Experimental: Boolean value if we should install Prisma. Must be used in conjunction with `--CI`.\",\n      (value) => !!value && value !== \"false\",\n    )\n    /** @experimental - Used for CI E2E tests. Used in conjunction with `--CI` to skip prompting. */\n    .option(\n      \"--trpc [boolean]\",\n      \"Experimental: Boolean value if we should install tRPC. Must be used in conjunction with `--CI`.\",\n      (value) => !!value && value !== \"false\",\n    )\n    /** @experimental - Used for CI E2E tests. Used in conjunction with `--CI` to skip prompting. */\n    .option(\n      \"-i, --import-alias\",\n      \"Explicitly tell the CLI to use a custom import alias\",\n      defaultOptions.flags.importAlias,\n    )\n    /** END CI-FLAGS */\n    .version(getVersion(), \"-v, --version\", \"Display the version number\")\n    .addHelpText(\n      \"afterAll\",\n      `\\n The t3 stack was inspired by ${chalk\n        .hex(\"#E8DCFF\")\n        .bold(\n          \"@t3dotgg\",\n        )} and has been used to build awesome fullstack applications like ${chalk\n        .hex(\"#E24A8D\")\n        .underline(\"https://ping.gg\")} \\n`,\n    )\n    .parse(process.argv);\n\n  // FIXME: TEMPORARY WARNING WHEN USING YARN 3. SEE ISSUE #57\n  if (process.env.npm_config_user_agent?.startsWith(\"yarn/3\")) {\n    logger.warn(`  WARNING: It looks like you are using Yarn 3. This is currently not supported,\n  and likely to result in a crash. Please run create-t3-app with another\n  package manager such as pnpm, npm, or Yarn Classic.\n  See: https://github.com/t3-oss/create-t3-app/issues/57`);\n  }\n\n  // Needs to be separated outside the if statement to correctly infer the type as string | undefined\n  const cliProvidedName = program.args[0];\n  if (cliProvidedName) {\n    cliResults.appName = cliProvidedName;\n  }\n\n  cliResults.flags = program.opts();\n\n  /** @internal Used for CI E2E tests. */\n  let CIMode = false;\n  if (cliResults.flags.CI) {\n    CIMode = true;\n    cliResults.packages = [];\n    if (cliResults.flags.trpc) cliResults.packages.push(\"trpc\");\n    if (cliResults.flags.tailwind) cliResults.packages.push(\"tailwind\");\n    if (cliResults.flags.prisma) cliResults.packages.push(\"prisma\");\n    if (cliResults.flags.nextAuth) cliResults.packages.push(\"nextAuth\");\n  }\n\n  // Explained below why this is in a try/catch block\n  try {\n    if (process.env.TERM_PROGRAM?.toLowerCase().includes(\"mintty\")) {\n      logger.warn(`  WARNING: It looks like you are using MinTTY, which is non-interactive. This is most likely because you are \n  using Git Bash. If that's that case, please use Git Bash from another terminal, such as Windows Terminal. Alternatively, you \n  can provide the arguments from the CLI directly: https://create.t3.gg/en/installation#experimental-usage to skip the prompts.`);\n\n      const error = new Error(\"Non-interactive environment\");\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (error as any).isTTYError = true;\n      throw error;\n    }\n\n    // if --CI flag is set, we are running in CI mode and should not prompt the user\n    // if --default flag is set, we should not prompt the user\n    if (!cliResults.flags.default && !CIMode) {\n      if (!cliProvidedName) {\n        cliResults.appName = await promptAppName();\n      }\n\n      await promptLanguage();\n      cliResults.packages = await promptPackages();\n      if (!cliResults.flags.noGit) {\n        cliResults.flags.noGit = !(await promptGit());\n      }\n\n      if (!cliResults.flags.noInstall) {\n        cliResults.flags.noInstall = !(await promptInstall());\n      }\n\n      cliResults.flags.importAlias = await promptImportAlias();\n    }\n  } catch (err) {\n    // If the user is not calling create-t3-app from an interactive terminal, inquirer will throw an error with isTTYError = true\n    // If this happens, we catch the error, tell the user what has happened, and then continue to run the program with a default t3 app\n    // Otherwise we have to do some fancy namespace extension logic on the Error type which feels overkill for one line\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (err instanceof Error && (err as any).isTTYError) {\n      logger.warn(`\n  ${CREATE_T3_APP} needs an interactive terminal to provide options`);\n\n      const { shouldContinue } = await inquirer.prompt<{\n        shouldContinue: boolean;\n      }>({\n        name: \"shouldContinue\",\n        type: \"confirm\",\n        message: `Continue scaffolding a default T3 app?`,\n        default: true,\n      });\n\n      if (!shouldContinue) {\n        logger.info(\"Exiting...\");\n        process.exit(0);\n      }\n\n      logger.info(`Bootstrapping a default T3 app in ./${cliResults.appName}`);\n    } else {\n      throw err;\n    }\n  }\n\n  return cliResults;\n};\n\nconst promptAppName = async (): Promise<string> => {\n  const { appName } = await inquirer.prompt<Pick<CliResults, \"appName\">>({\n    name: \"appName\",\n    type: \"input\",\n    message: \"What will your project be called?\",\n    default: defaultOptions.appName,\n    validate: validateAppName,\n    transformer: (input: string) => {\n      return input.trim();\n    },\n  });\n\n  return appName;\n};\n\nconst promptLanguage = async (): Promise<void> => {\n  const { language } = await inquirer.prompt<{ language: string }>({\n    name: \"language\",\n    type: \"list\",\n    message: \"Will you be using TypeScript or JavaScript?\",\n    choices: [\n      { name: \"TypeScript\", value: \"typescript\", short: \"TypeScript\" },\n      { name: \"JavaScript\", value: \"javascript\", short: \"JavaScript\" },\n    ],\n    default: \"typescript\",\n  });\n\n  if (language === \"javascript\") {\n    logger.error(\"Wrong answer, using TypeScript instead...\");\n  } else {\n    logger.success(\"Good choice! Using TypeScript!\");\n  }\n};\n\nconst promptPackages = async (): Promise<AvailablePackages[]> => {\n  const { packages } = await inquirer.prompt<Pick<CliResults, \"packages\">>({\n    name: \"packages\",\n    type: \"checkbox\",\n    message: \"Which packages would you like to enable?\",\n    choices: availablePackages\n      .filter((pkg) => pkg !== \"envVariables\") // don't prompt for env-vars\n      .map((pkgName) => ({\n        name: pkgName,\n        checked: false,\n      })),\n  });\n\n  return packages;\n};\n\nconst promptGit = async (): Promise<boolean> => {\n  const { git } = await inquirer.prompt<{ git: boolean }>({\n    name: \"git\",\n    type: \"confirm\",\n    message: \"Initialize a new git repository?\",\n    default: true,\n  });\n\n  if (git) {\n    logger.success(\"Nice one! Initializing repository!\");\n  } else {\n    logger.info(\"Sounds good! You can come back and run git init later.\");\n  }\n\n  return git;\n};\n\nconst promptInstall = async (): Promise<boolean> => {\n  const pkgManager = getUserPkgManager();\n\n  const { install } = await inquirer.prompt<{ install: boolean }>({\n    name: \"install\",\n    type: \"confirm\",\n    message:\n      `Would you like us to run '${pkgManager}` +\n      (pkgManager === \"yarn\" ? `'?` : ` install'?`),\n    default: true,\n  });\n\n  if (install) {\n    logger.success(\"Alright. We'll install the dependencies for you!\");\n  } else {\n    if (pkgManager === \"yarn\") {\n      logger.info(\n        `No worries. You can run '${pkgManager}' later to install the dependencies.`,\n      );\n    } else {\n      logger.info(\n        `No worries. You can run '${pkgManager} install' later to install the dependencies.`,\n      );\n    }\n  }\n\n  return install;\n};\n\nconst promptImportAlias = async (): Promise<string> => {\n  const { importAlias } = await inquirer.prompt<Pick<CliFlags, \"importAlias\">>({\n    name: \"importAlias\",\n    type: \"input\",\n    message: \"What import alias would you like configured?\",\n    default: defaultOptions.flags.importAlias,\n    validate: validateImportAlias,\n    transformer: (input: string) => {\n      return input.trim();\n    },\n  });\n\n  return importAlias;\n};\n","import { type PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const getVersion = () => {\n  const packageJsonPath = path.join(PKG_ROOT, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n\n  return packageJsonContent.version ?? \"1.0.0\";\n};\n","export type PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\n\nexport const getUserPkgManager: () => PackageManager = () => {\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith(\"yarn\")) {\n      return \"yarn\";\n    } else if (userAgent.startsWith(\"pnpm\")) {\n      return \"pnpm\";\n    } else {\n      return \"npm\";\n    }\n  } else {\n    // If no user agent is set, assume npm\n    return \"npm\";\n  }\n};\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n};\n","const validationRegExp =\n  /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/;\n\n//Validate a string against allowed package.json names\nexport const validateAppName = (input: string) => {\n  const paths = input.split(\"/\");\n\n  // If the first part is a @, it's a scoped package\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\n\n  let appName = paths[paths.length - 1];\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\n  }\n\n  if (input === \".\" || validationRegExp.test(appName ?? \"\")) {\n    return true;\n  } else {\n    return \"App name must consist of only lowercase alphanumeric characters, '-', and '_'\";\n  }\n};\n","export const validateImportAlias = (input: string) => {\n  if (input.startsWith(\".\") || input.startsWith(\"/\")) {\n    return \"Import alias can't start with '.' or '/'\";\n  } else {\n    return true;\n  }\n};\n","import { type PkgInstallerMap } from \"~/installers/index.js\";\nimport path from \"path\";\nimport { installPackages } from \"~/helpers/installPackages.js\";\nimport { scaffoldProject } from \"~/helpers/scaffoldProject.js\";\nimport { selectAppFile, selectIndexFile } from \"~/helpers/selectBoilerplate.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\n\ninterface CreateProjectOptions {\n  projectName: string;\n  packages: PkgInstallerMap;\n  noInstall: boolean;\n  importAlias: string;\n}\n\nexport const createProject = async ({\n  projectName,\n  packages,\n  noInstall,\n}: CreateProjectOptions) => {\n  const pkgManager = getUserPkgManager();\n  const projectDir = path.resolve(process.cwd(), projectName);\n\n  // Bootstraps the base Next.js application\n  await scaffoldProject({\n    projectName,\n    projectDir,\n    pkgManager,\n    noInstall,\n  });\n\n  // Install the selected packages\n  installPackages({\n    projectDir,\n    pkgManager,\n    packages,\n    noInstall,\n  });\n\n  // TODO: Look into using handlebars or other templating engine to scaffold without needing to maintain multiple copies of the same file\n  selectAppFile({ projectDir, packages });\n  selectIndexFile({ projectDir, packages });\n\n  return projectDir;\n};\n","import {\n  type InstallerOptions,\n  type PkgInstallerMap,\n} from \"~/installers/index.js\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport { logger } from \"~/utils/logger.js\";\n\ntype InstallPackagesOptions = {\n  packages: PkgInstallerMap;\n} & InstallerOptions;\n// This runs the installer for all the packages that the user has selected\nexport const installPackages = (options: InstallPackagesOptions) => {\n  const { packages } = options;\n  logger.info(\"Adding boilerplate...\");\n\n  for (const [name, pkgOpts] of Object.entries(packages)) {\n    if (pkgOpts.inUse) {\n      const spinner = ora(`Boilerplating ${name}...`).start();\n      pkgOpts.installer(options);\n      spinner.succeed(\n        chalk.green(\n          `Successfully setup boilerplate for ${chalk.green.bold(name)}`,\n        ),\n      );\n    }\n  }\n\n  logger.info(\"\");\n};\n","import path from \"path\";\nimport chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { type InstallerOptions } from \"~/installers/index.js\";\nimport { logger } from \"~/utils/logger.js\";\n\n// This bootstraps the base Next.js application\nexport const scaffoldProject = async ({\n  projectName,\n  projectDir,\n  pkgManager,\n  noInstall,\n}: InstallerOptions) => {\n  const srcDir = path.join(PKG_ROOT, \"template/base\");\n\n  if (!noInstall) {\n    logger.info(`\\nUsing: ${chalk.cyan.bold(pkgManager)}\\n`);\n  } else {\n    logger.info(\"\");\n  }\n\n  const spinner = ora(`Scaffolding in: ${projectDir}...\\n`).start();\n\n  if (fs.existsSync(projectDir)) {\n    if (fs.readdirSync(projectDir).length === 0) {\n      if (projectName !== \".\")\n        spinner.info(\n          `${chalk.cyan.bold(\n            projectName,\n          )} exists but is empty, continuing...\\n`,\n        );\n    } else {\n      spinner.stopAndPersist();\n      const { overwriteDir } = await inquirer.prompt<{\n        overwriteDir: \"abort\" | \"clear\" | \"overwrite\";\n      }>({\n        name: \"overwriteDir\",\n        type: \"list\",\n        message: `${chalk.redBright.bold(\"Warning:\")} ${chalk.cyan.bold(\n          projectName,\n        )} already exists and isn't empty. How would you like to proceed?`,\n        choices: [\n          {\n            name: \"Abort installation (recommended)\",\n            value: \"abort\",\n            short: \"Abort\",\n          },\n          {\n            name: \"Clear the directory and continue installation\",\n            value: \"clear\",\n            short: \"Clear\",\n          },\n          {\n            name: \"Continue installation and overwrite conflicting files\",\n            value: \"overwrite\",\n            short: \"Overwrite\",\n          },\n        ],\n        default: \"abort\",\n      });\n      if (overwriteDir === \"abort\") {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(1);\n      }\n\n      const overwriteAction =\n        overwriteDir === \"clear\"\n          ? \"clear the directory\"\n          : \"overwrite conflicting files\";\n\n      const { confirmOverwriteDir } = await inquirer.prompt<{\n        confirmOverwriteDir: boolean;\n      }>({\n        name: \"confirmOverwriteDir\",\n        type: \"confirm\",\n        message: `Are you sure you want to ${overwriteAction}?`,\n        default: false,\n      });\n\n      if (!confirmOverwriteDir) {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(1);\n      }\n\n      if (overwriteDir === \"clear\") {\n        spinner.info(\n          `Emptying ${chalk.cyan.bold(projectName)} and creating t3 app..\\n`,\n        );\n        fs.emptyDirSync(projectDir);\n      }\n    }\n  }\n\n  spinner.start();\n\n  fs.copySync(srcDir, projectDir);\n  fs.renameSync(\n    path.join(projectDir, \"_gitignore\"),\n    path.join(projectDir, \".gitignore\"),\n  );\n\n  const scaffoldedName =\n    projectName === \".\" ? \"App\" : chalk.cyan.bold(projectName);\n\n  spinner.succeed(\n    `${scaffoldedName} ${chalk.green(\"scaffolded successfully!\")}\\n`,\n  );\n};\n","import { type InstallerOptions } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\ntype SelectBoilerplateProps = Required<\n  Pick<InstallerOptions, \"projectDir\" | \"packages\">\n>;\n// This generates the _app.tsx file that is used to render the app\nexport const selectAppFile = ({\n  projectDir,\n  packages,\n}: SelectBoilerplateProps) => {\n  const appFileDir = path.join(PKG_ROOT, \"template/extras/src/pages/_app\");\n\n  const usingTRPC = packages.trpc.inUse;\n  const usingNextAuth = packages.nextAuth.inUse;\n\n  let appFile = \"\";\n  if (usingNextAuth && usingTRPC) {\n    appFile = \"with-auth-trpc.tsx\";\n  } else if (usingNextAuth && !usingTRPC) {\n    appFile = \"with-auth.tsx\";\n  } else if (!usingNextAuth && usingTRPC) {\n    appFile = \"with-trpc.tsx\";\n  }\n\n  if (appFile !== \"\") {\n    const appSrc = path.join(appFileDir, appFile);\n    const appDest = path.join(projectDir, \"src/pages/_app.tsx\");\n    fs.copySync(appSrc, appDest);\n  }\n};\n\n// This selects the proper index.tsx to be used that showcases the chosen tech\nexport const selectIndexFile = ({\n  projectDir,\n  packages,\n}: SelectBoilerplateProps) => {\n  const indexFileDir = path.join(PKG_ROOT, \"template/extras/src/pages/index\");\n\n  const usingTRPC = packages.trpc.inUse;\n  const usingTw = packages.tailwind.inUse;\n  const usingAuth = packages.nextAuth.inUse;\n\n  let indexFile = \"\";\n  if (usingTRPC && usingTw && usingAuth) {\n    indexFile = \"with-auth-trpc-tw.tsx\";\n  } else if (usingTRPC && !usingTw && usingAuth) {\n    indexFile = \"with-auth-trpc.tsx\";\n  } else if (usingTRPC && usingTw) {\n    indexFile = \"with-trpc-tw.tsx\";\n  } else if (usingTRPC && !usingTw) {\n    indexFile = \"with-trpc.tsx\";\n  } else if (!usingTRPC && usingTw) {\n    indexFile = \"with-tw.tsx\";\n  }\n\n  if (indexFile !== \"\") {\n    const indexSrc = path.join(indexFileDir, indexFile);\n    const indexDest = path.join(projectDir, \"src/pages/index.tsx\");\n    fs.copySync(indexSrc, indexDest);\n  }\n};\n","import chalk from \"chalk\";\nimport { execSync } from \"child_process\";\nimport { execa } from \"execa\";\nimport fs from \"fs-extra\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { logger } from \"~/utils/logger.js\";\n\nconst isGitInstalled = (dir: string): boolean => {\n  try {\n    execSync(\"git --version\", { cwd: dir });\n    return true;\n  } catch (_e) {\n    return false;\n  }\n};\n\n/** @returns Whether or not the provided directory has a `.git` subdirectory in it. */\nconst isRootGitRepo = (dir: string): boolean => {\n  return fs.existsSync(path.join(dir, \".git\"));\n};\n\n/** @returns Whether or not this directory or a parent directory has a `.git` directory. */\nconst isInsideGitRepo = async (dir: string): Promise<boolean> => {\n  try {\n    // If this command succeeds, we're inside a git repo\n    await execa(\"git\", [\"rev-parse\", \"--is-inside-work-tree\"], {\n      cwd: dir,\n      stdout: \"ignore\",\n    });\n    return true;\n  } catch (_e) {\n    // Else, it will throw a git-error and we return false\n    return false;\n  }\n};\n\nconst getGitVersion = () => {\n  const stdout = execSync(\"git --version\").toString().trim();\n  const gitVersionTag = stdout.split(\" \")[2];\n  const major = gitVersionTag?.split(\".\")[0];\n  const minor = gitVersionTag?.split(\".\")[1];\n  return { major: Number(major), minor: Number(minor) };\n};\n\n/** @returns The git config value of \"init.defaultBranch\". If it is not set, returns \"main\". */\nconst getDefaultBranch = () => {\n  const stdout = execSync(\"git config --global init.defaultBranch || echo main\")\n    .toString()\n    .trim();\n\n  return stdout;\n};\n\n// This initializes the Git-repository for the project\nexport const initializeGit = async (projectDir: string) => {\n  logger.info(\"Initializing Git...\");\n\n  if (!isGitInstalled(projectDir)) {\n    logger.warn(\"Git is not installed. Skipping Git initialization.\");\n    return;\n  }\n\n  const spinner = ora(\"Creating a new git repo...\\n\").start();\n\n  const isRoot = isRootGitRepo(projectDir);\n  const isInside = await isInsideGitRepo(projectDir);\n  const dirName = path.parse(projectDir).name; // skip full path for logging\n\n  if (isInside && isRoot) {\n    // Dir is a root git repo\n    spinner.stop();\n    const { overwriteGit } = await inquirer.prompt<{\n      overwriteGit: boolean;\n    }>({\n      name: \"overwriteGit\",\n      type: \"confirm\",\n      message: `${chalk.redBright.bold(\n        \"Warning:\",\n      )} Git is already initialized in \"${dirName}\". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,\n      default: false,\n    });\n    if (!overwriteGit) {\n      spinner.info(\"Skipping Git initialization.\");\n      return;\n    }\n    // Deleting the .git folder\n    fs.removeSync(path.join(projectDir, \".git\"));\n  } else if (isInside && !isRoot) {\n    // Dir is inside a git worktree\n    spinner.stop();\n    const { initializeChildGitRepo } = await inquirer.prompt<{\n      initializeChildGitRepo: boolean;\n    }>({\n      name: \"initializeChildGitRepo\",\n      type: \"confirm\",\n      message: `${chalk.redBright.bold(\n        \"Warning:\",\n      )} \"${dirName}\" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,\n      default: false,\n    });\n    if (!initializeChildGitRepo) {\n      spinner.info(\"Skipping Git initialization.\");\n      return;\n    }\n  }\n\n  // We're good to go, initializing the git repo\n  try {\n    const branchName = getDefaultBranch();\n\n    // --initial-branch flag was added in git v2.28.0\n    const { major, minor } = getGitVersion();\n    if (major < 2 || minor < 28) {\n      await execa(\"git\", [\"init\"], { cwd: projectDir });\n      await execa(\"git\", [\"branch\", \"-m\", branchName], { cwd: projectDir });\n    } else {\n      await execa(\"git\", [\"init\", `--initial-branch=${branchName}`], {\n        cwd: projectDir,\n      });\n    }\n    await execa(\"git\", [\"add\", \".\"], { cwd: projectDir });\n    spinner.succeed(\n      `${chalk.green(\"Successfully initialized and staged\")} ${chalk.green.bold(\n        \"git\",\n      )}\\n`,\n    );\n  } catch (error) {\n    // Safeguard, should be unreachable\n    spinner.fail(\n      `${chalk.bold.red(\n        \"Failed:\",\n      )} could not initialize git. Update git to the latest version!\\n`,\n    );\n  }\n};\n","import fs from \"fs\";\nimport path from \"path\";\n\nfunction replaceTextInFiles(\n  directoryPath: string,\n  search: string,\n  replacement: string,\n): void {\n  const files = fs.readdirSync(directoryPath);\n\n  files.forEach((file) => {\n    const filePath = path.join(directoryPath, file);\n    if (fs.statSync(filePath).isDirectory()) {\n      replaceTextInFiles(filePath, search, replacement);\n    } else {\n      const data = fs.readFileSync(filePath, \"utf8\");\n      const updatedData = data.replace(new RegExp(search, \"g\"), replacement);\n      fs.writeFileSync(filePath, updatedData, \"utf8\");\n    }\n  });\n}\n\nexport const setImportAlias = (projectDir: string, importAlias: string) => {\n  const normalizedImportAlias = importAlias\n    .replace(/\\*/g, \"\") // remove any wildcards (~/* -> ~/)\n    .replace(/[^\\/]$/, \"$&/\"); // ensure trailing slash (@ -> ~/)\n\n  // update import alias in any files if not using the default\n  replaceTextInFiles(projectDir, `~/`, normalizedImportAlias);\n};\n","import { type InstallerOptions } from \"~/installers/index.js\";\nimport { DEFAULT_APP_NAME } from \"~/consts.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\nimport { logger } from \"~/utils/logger.js\";\n\n// This logs the next steps that the user should take in order to advance the project\nexport const logNextSteps = ({\n  projectName = DEFAULT_APP_NAME,\n  packages,\n  noInstall,\n}: Pick<InstallerOptions, \"projectName\" | \"packages\" | \"noInstall\">) => {\n  const pkgManager = getUserPkgManager();\n\n  logger.info(\"Next steps:\");\n  projectName !== \".\" && logger.info(`  cd ${projectName}`);\n  if (noInstall) {\n    // To reflect yarn's default behavior of installing packages when no additional args provided\n    if (pkgManager === \"yarn\") {\n      logger.info(`  ${pkgManager}`);\n    } else {\n      logger.info(`  ${pkgManager} install`);\n    }\n  }\n\n  if (packages?.prisma.inUse) {\n    logger.info(\n      `  ${pkgManager === \"npm\" ? \"npx\" : pkgManager} prisma db push`,\n    );\n  }\n\n  logger.info(`  ${pkgManager === \"npm\" ? \"npm run\" : pkgManager} dev`);\n};\n","import pathModule from \"path\";\n\n/**\n * Parses the appName and its path from the user input.\n *\n * Returns a tuple of of `[appName, path]`, where `appName` is the name put in the \"package.json\"\n * file and `path` is the path to the directory where the app will be created.\n *\n * If `appName` is \".\", the name of the directory will be used instead. Handles the case where the\n * input includes a scoped package name in which case that is being parsed as the name, but not\n * included as the path.\n *\n * For example:\n *\n * - dir/@mono/app => [\"@mono/app\", \"dir/app\"]\n * - dir/app => [\"app\", \"dir/app\"]\n */\nexport const parseNameAndPath = (input: string) => {\n  const paths = input.split(\"/\");\n\n  let appName = paths[paths.length - 1];\n\n  // If the user ran `npx create-t3-app .` or similar, the appName should be the current directory\n  if (appName === \".\") {\n    const parsedCwd = pathModule.resolve(process.cwd());\n    appName = pathModule.basename(parsedCwd);\n  }\n\n  // If the first part is a @, it's a scoped package\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\n  }\n\n  const path = paths.filter((p) => !p.startsWith(\"@\")).join(\"/\");\n\n  return [appName, path] as const;\n};\n","import gradient from \"gradient-string\";\nimport { TITLE_TEXT } from \"~/consts.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\n\n// colors brought in from vscode poimandres theme\nconst poimandresTheme = {\n  blue: \"#add7ff\",\n  cyan: \"#89ddff\",\n  green: \"#5de4c7\",\n  magenta: \"#fae4fc\",\n  red: \"#d0679d\",\n  yellow: \"#fffac2\",\n};\n\nexport const renderTitle = () => {\n  const t3Gradient = gradient(Object.values(poimandresTheme));\n\n  // resolves weird behavior where the ascii is offset\n  const pkgManager = getUserPkgManager();\n  if (pkgManager === \"yarn\" || pkgManager === \"pnpm\") {\n    console.log(\"\");\n  }\n  console.log(t3Gradient.multiline(TITLE_TEXT));\n};\n","import { execSync } from \"child_process\";\nimport { getVersion } from \"./getT3Version.js\";\nimport { logger } from \"./logger.js\";\n\nexport const renderVersionWarning = (npmVersion: string) => {\n  const currentVersion = getVersion();\n\n  //   console.log(\"current\", currentVersion);\n  //   console.log(\"npm\", npmVersion);\n\n  if (currentVersion.includes(\"beta\")) {\n    logger.warn(\"  You are using a beta version of create-t3-app.\");\n    logger.warn(\"  Please report any bugs you encounter.\");\n  } else if (currentVersion.includes(\"next\")) {\n    logger.warn(\n      \"  You are running create-t3-app with the @next tag which is no longer maintained.\",\n    );\n    logger.warn(\"  Please run the CLI with @latest instead.\");\n  } else if (currentVersion !== npmVersion) {\n    logger.warn(\"  You are using an outdated version of create-t3-app.\");\n    logger.warn(\n      \"  Your version:\",\n      currentVersion + \".\",\n      \"Latest version in the npm registry:\",\n      npmVersion,\n    );\n    logger.warn(\"  Please run the CLI with @latest to get the latest updates.\");\n  }\n  console.log(\"\");\n};\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n * https://github.com/facebook/create-react-app/blob/main/packages/create-react-app/LICENSE\n */\nimport https from \"https\";\n\ntype DistTagsBody = {\n  latest: string;\n};\n\nfunction checkForLatestVersion(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    https\n      .get(\n        \"https://registry.npmjs.org/-/package/create-t3-app/dist-tags\",\n        (res) => {\n          if (res.statusCode === 200) {\n            let body = \"\";\n            res.on(\"data\", (data) => (body += data));\n            res.on(\"end\", () => {\n              resolve((JSON.parse(body) as DistTagsBody).latest);\n            });\n          } else {\n            reject();\n          }\n        },\n      )\n      .on(\"error\", () => {\n        // logger.error(\"Unable to check for latest version.\");\n        reject();\n      });\n  });\n}\n\nexport const getNpmVersion = () =>\n  // `fetch` to the registry is faster than `npm view` so we try that first\n  checkForLatestVersion().catch(() => {\n    try {\n      return execSync(\"npm view create-t3-app version\").toString().trim();\n    } catch {\n      return null;\n    }\n  });\n","import chalk from \"chalk\";\nimport { execa } from \"execa\";\nimport ora, { type Ora } from \"ora\";\nimport {\n  getUserPkgManager,\n  type PackageManager,\n} from \"~/utils/getUserPkgManager.js\";\nimport { logger } from \"~/utils/logger.js\";\n\ntype Options = {\n  projectDir: string;\n};\n\n/*eslint-disable @typescript-eslint/no-floating-promises*/\nconst runInstallCommand = async (\n  pkgManager: PackageManager,\n  projectDir: string,\n): Promise<Ora | null> => {\n  switch (pkgManager) {\n    // When using npm, inherit the stderr stream so that the progress bar is shown\n    case \"npm\":\n      await execa(pkgManager, [\"install\"], {\n        cwd: projectDir,\n        stderr: \"inherit\",\n      });\n\n      return null;\n    // When using yarn or pnpm, use the stdout stream and ora spinner to show the progress\n    case \"pnpm\":\n      const pnpmSpinner = ora(\"Running pnpm install...\").start();\n      const pnpmSubprocess = execa(pkgManager, [\"install\"], {\n        cwd: projectDir,\n        stdout: \"pipe\",\n      });\n\n      await new Promise<void>((res, rej) => {\n        pnpmSubprocess.stdout?.on(\"data\", (data: Buffer) => {\n          const text = data.toString();\n\n          if (text.includes(\"Progress\")) {\n            pnpmSpinner.text = text.includes(\"|\")\n              ? text.split(\" | \")[1] ?? \"\"\n              : text;\n          }\n        });\n        pnpmSubprocess.on(\"error\", (e) => rej(e));\n        pnpmSubprocess.on(\"close\", () => res());\n      });\n\n      return pnpmSpinner;\n    case \"yarn\":\n      const yarnSpinner = ora(\"Running yarn...\").start();\n      const yarnSubprocess = execa(pkgManager, [], {\n        cwd: projectDir,\n        stdout: \"pipe\",\n      });\n\n      await new Promise<void>((res, rej) => {\n        yarnSubprocess.stdout?.on(\"data\", (data: Buffer) => {\n          yarnSpinner.text = data.toString();\n        });\n        yarnSubprocess.on(\"error\", (e) => rej(e));\n        yarnSubprocess.on(\"close\", () => res());\n      });\n\n      return yarnSpinner;\n  }\n};\n/*eslint-enable @typescript-eslint/no-floating-promises*/\n\nexport const installDependencies = async ({ projectDir }: Options) => {\n  logger.info(\"Installing dependencies...\");\n  const pkgManager = getUserPkgManager();\n\n  const installSpinner = await runInstallCommand(pkgManager, projectDir);\n\n  // If the spinner was used to show the progress, use succeed method on it\n  // If not, use the succeed on a new spinner\n  (installSpinner || ora()).succeed(\n    chalk.green(\"Successfully installed dependencies!\\n\"),\n  );\n};\n"],"mappings":";AAGA,OAAOA,MAAU,OACjB,OAAOC,MAAQ,WCHf,OAAOC,MAAU,OACjB,OAAOC,MAAQ,WCFf,OAAOC,MAAU,OACjB,OAAS,iBAAAC,OAAqB,MAI9B,IAAMC,GAAaD,GAAc,YAAY,GAAG,EAC1CE,GAAWH,EAAK,QAAQE,EAAU,EAC3BE,EAAWJ,EAAK,KAAKG,GAAU,KAAK,EAIpCE,EAAa;AAAA;AAAA;AAAA;AAAA,EAKbC,EAAmB,YACnBC,EAAgB,gBDZtB,IAAMC,EAAmC,CAAC,CAAE,WAAAC,EAAY,SAAAC,CAAS,IAAM,CAC5E,IAAMC,EAAYD,GAAU,SAAS,MAC/BE,EAAcF,GAAU,OAAO,MAE/BG,EAAaC,GAAc,CAAC,CAACH,EAAW,CAAC,CAACC,CAAW,EAErDG,EACJJ,GAAaC,EACT,uBACAD,EACA,gBACAC,EACA,kBACA,GAEN,GAAIG,IAAY,GAAI,CAClB,IAAMC,EAAeC,EAAK,KACxBC,EACA,0BACAH,CACF,EACMI,EAAgBF,EAAK,KAAKR,EAAY,aAAa,EACzDW,EAAG,SAASJ,EAAcG,CAAa,EAGzC,IAAME,EAAUJ,EAAK,KAAKR,EAAY,MAAM,EACtCa,EAAiBL,EAAK,KAAKR,EAAY,cAAc,EAE3DW,EAAG,cAAcC,EAASR,EAAY,OAAO,EAC7CO,EAAG,cAAcE,EAAgBC,GAAoBV,EAAY,OAAO,CAC1E,EAEMC,GAAgB,CAACH,EAAoBC,IAAyB,CAClE,IAAIY,EAAU;AAAA;AAAA;AAAA,EAIX,KAAK,EACL,OAAO;AAAA,CAAI,EAEd,OAAIZ,IACFY,GAAW;AAAA;AAAA;AAAA;AAAA,GAMTb,IACFa,GAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAaT,CAACb,GAAa,CAACC,IACjBY,GAAW;AAAA;AAAA;AAAA;AAAA,GAMNA,CACT,EAEMD,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvB,KAAK,EACL,OAAO;AAAA;AAAA,CAAM,EEpFhB,OAAOE,MAAU,OACjB,OAAOC,MAAQ,WCHf,OAAOC,MAAU,OACjB,OAAOC,MAAQ,WCGR,IAAMC,EAAuB,CAElC,YAAa,UACb,4BAA6B,SAG7B,OAAQ,UACR,iBAAkB,UAGlB,YAAa,SACb,aAAc,WACd,QAAS,UACT,SAAU,SACV,8BAA+B,SAC/B,kBAAmB,SAGnB,eAAgB,WAChB,eAAgB,WAChB,oBAAqB,WACrB,aAAc,WACd,wBAAyB,UACzB,UAAW,QACb,EDrBA,OAAOC,OAAqB,oBAErB,IAAMC,EAAwBC,GAI/B,CACJ,GAAM,CAAE,aAAAC,EAAc,QAAAC,EAAS,WAAAC,CAAW,EAAIH,EAExCI,EAAUC,EAAG,aACjBC,EAAK,KAAKH,EAAY,cAAc,CACtC,EAEAF,EAAa,QAASM,GAAY,CAChC,IAAMC,EAAUC,EAAqBF,CAAO,EAExCL,GAAWE,EAAQ,gBACrBA,EAAQ,gBAAgBG,CAAO,EAAIC,EAC1BJ,EAAQ,eACjBA,EAAQ,aAAaG,CAAO,EAAIC,EAEpC,CAAC,EACD,IAAME,EAAgBZ,GAAgBM,CAAO,EAE7CC,EAAG,cAAcC,EAAK,KAAKH,EAAY,cAAc,EAAGO,EAAe,CACrE,OAAQ,CACV,CAAC,CACH,ED3BO,IAAMC,EAA+B,CAAC,CAAE,WAAAC,EAAY,SAAAC,CAAS,IAAM,CACxE,IAAMC,EAAcD,GAAU,OAAO,MAC/BE,EAAgC,CAAC,WAAW,EAC9CD,GAAaC,EAAK,KAAK,2BAA2B,EAEtDC,EAAqB,CACnB,WAAAJ,EACA,aAAcG,EACd,QAAS,EACX,CAAC,EAED,IAAME,EAAYC,EAAK,KAAKC,EAAU,iBAAiB,EAEjDC,EAAiB,sCACjBC,EAAgBH,EAAK,KAAKD,EAAWG,CAAc,EACnDE,EAAiBJ,EAAK,KAAKN,EAAYQ,CAAc,EAErDG,EAAgBL,EAAK,KACzBD,EACA,kBACAH,EAAc,iBAAmB,SACnC,EACMU,EAAiBN,EAAK,KAAKN,EAAY,oBAAoB,EAEjEa,EAAG,SAASJ,EAAeC,CAAc,EACzCG,EAAG,SAASF,EAAeC,CAAc,CAC3C,EG/BA,OAAOE,MAAU,OACjB,OAAOC,MAAQ,WAIR,IAAMC,EAA6B,CAAC,CAAE,WAAAC,EAAY,SAAAC,CAAS,IAAM,CACtEC,EAAqB,CACnB,WAAAF,EACA,aAAc,CAAC,QAAQ,EACvB,QAAS,EACX,CAAC,EACDE,EAAqB,CACnB,WAAAF,EACA,aAAc,CAAC,gBAAgB,EAC/B,QAAS,EACX,CAAC,EAED,IAAMG,EAAYC,EAAK,KAAKC,EAAU,iBAAiB,EAEjDC,EAAYF,EAAK,KACrBD,EACA,gBACAF,GAAU,SAAS,MAAQ,mBAAqB,aAClD,EACMM,EAAaH,EAAK,KAAKJ,EAAY,sBAAsB,EAEzDQ,EAAYJ,EAAK,KAAKD,EAAW,kBAAkB,EACnDM,EAAaL,EAAK,KAAKJ,EAAY,kBAAkB,EAGrDU,EAAkBN,EAAK,KAAKJ,EAAY,cAAc,EAEtDW,EAAqBC,EAAG,aAAaF,CAAe,EAC1DC,EAAmB,QAAU,CAC3B,GAAGA,EAAmB,QACtB,YAAa,iBACf,EAEAC,EAAG,SAASN,EAAWC,CAAU,EACjCK,EAAG,SAASJ,EAAWC,CAAU,EACjCG,EAAG,cAAcF,EAAiBC,EAAoB,CACpD,OAAQ,CACV,CAAC,CACH,EC7CA,OAAOE,MAAQ,WACf,OAAOC,MAAU,OAKV,IAAMC,EAA+B,CAAC,CAAE,WAAAC,CAAW,IAAM,CAC9DC,EAAqB,CACnB,WAAAD,EACA,aAAc,CACZ,cACA,UACA,eACA,WACA,8BACA,iBACF,EACA,QAAS,EACX,CAAC,EAED,IAAME,EAAYC,EAAK,KAAKC,EAAU,iBAAiB,EAEjDC,EAAWF,EAAK,KAAKD,EAAW,2BAA2B,EAC3DI,EAAYH,EAAK,KAAKH,EAAY,oBAAoB,EAEtDO,EAAgBJ,EAAK,KAAKD,EAAW,2BAA2B,EAChEM,EAAiBL,EAAK,KAAKH,EAAY,oBAAoB,EAE3DS,EAAcN,EAAK,KAAKD,EAAW,4BAA4B,EAC/DQ,EAAeP,EAAK,KAAKH,EAAY,qBAAqB,EAE1DW,EAASR,EAAK,KAAKD,EAAW,wBAAwB,EACtDU,EAAUT,EAAK,KAAKH,EAAY,wBAAwB,EAE9Da,EAAG,SAASR,EAAUC,CAAS,EAC/BO,EAAG,SAASN,EAAeC,CAAc,EACzCK,EAAG,SAASF,EAAQC,CAAO,EAC3BC,EAAG,SAASJ,EAAaC,CAAY,EAGrC,IAAMI,EAAiBX,EAAK,KAAKH,EAAY,4BAA4B,EACzEa,EAAG,WAAWC,CAAc,CAC9B,EC1CA,OAAOC,MAAQ,WACf,OAAOC,MAAU,OAKV,IAAMC,EAA2B,CAAC,CAAE,WAAAC,EAAY,SAAAC,CAAS,IAAM,CACpEC,EAAqB,CACnB,WAAAF,EACA,aAAc,CACZ,wBACA,YACA,eACA,eACA,aACA,mBACF,EACA,QAAS,EACX,CAAC,EAED,IAAMG,EAAYF,GAAU,SAAS,MAC/BG,EAAcH,GAAU,OAAO,MAE/BI,EAAYC,EAAK,KAAKC,EAAU,iBAAiB,EAEjDC,EAAgBF,EAAK,KAAKD,EAAW,8BAA8B,EACnEI,EAAiBH,EAAK,KAAKN,EAAY,8BAA8B,EAErEU,EAAWJ,EAAK,KAAKD,EAAW,kBAAkB,EAClDM,EAAYL,EAAK,KAAKN,EAAY,kBAAkB,EAEpDY,EACJT,GAAaC,EACT,sBACAD,EACA,eACAC,EACA,iBACA,UACAS,EAAUP,EAAK,KAAKD,EAAW,sBAAuBO,CAAQ,EAC9DE,GAAWR,EAAK,KAAKN,EAAY,wBAAwB,EAEzDe,GAAgBT,EAAK,KAAKD,EAAW,wBAAwB,EAC7DW,GAAiBV,EAAK,KAAKN,EAAY,wBAAwB,EAE/DiB,GACJd,GAAaC,EACT,sBACAD,EACA,eACAC,EACA,iBACA,UAEAc,GAAmBZ,EAAK,KAC5BD,EACA,iCACAY,EACF,EACME,GAAoBb,EAAK,KAC7BN,EACA,mCACF,EAEAoB,EAAG,SAASZ,EAAeC,CAAc,EACzCW,EAAG,SAASV,EAAUC,CAAS,EAC/BS,EAAG,SAASP,EAASC,EAAQ,EAC7BM,EAAG,SAASL,GAAeC,EAAc,EACzCI,EAAG,SAASF,GAAkBC,EAAiB,CACjD,EC5DO,IAAME,GAAoB,CAC/B,WACA,SACA,WACA,OACA,cACF,EAoBaC,GACXC,IACqB,CACrB,SAAU,CACR,MAAOA,EAAS,SAAS,UAAU,EACnC,UAAWC,CACb,EACA,OAAQ,CACN,MAAOD,EAAS,SAAS,QAAQ,EACjC,UAAWE,CACb,EACA,SAAU,CACR,MAAOF,EAAS,SAAS,UAAU,EACnC,UAAWG,CACb,EACA,KAAM,CACJ,MAAOH,EAAS,SAAS,MAAM,EAC/B,UAAWI,CACb,EACA,aAAc,CACZ,MAAO,GACP,UAAWC,CACb,CACF,GCxDA,OAAOC,OAAW,QAClB,OAAS,WAAAC,OAAe,YACxB,OAAOC,MAAc,WCHrB,OAAOC,OAAU,OACjB,OAAOC,OAAQ,WAGR,IAAMC,EAAa,IAAM,CAC9B,IAAMC,EAAkBC,GAAK,KAAKC,EAAU,cAAc,EAI1D,OAF2BC,GAAG,aAAaH,CAAe,EAEhC,SAAW,OACvC,ECTO,IAAMI,EAA0C,IAAM,CAE3D,IAAMC,EAAY,QAAQ,IAAI,sBAE9B,OAAIA,EACEA,EAAU,WAAW,MAAM,EACtB,OACEA,EAAU,WAAW,MAAM,EAC7B,OAEA,MAIF,KAEX,EClBA,OAAOC,MAAW,QAEX,IAAMC,EAAS,CACpB,SAASC,EAAiB,CACxB,QAAQ,IAAIF,EAAM,IAAI,GAAGE,CAAI,CAAC,CAChC,EACA,QAAQA,EAAiB,CACvB,QAAQ,IAAIF,EAAM,OAAO,GAAGE,CAAI,CAAC,CACnC,EACA,QAAQA,EAAiB,CACvB,QAAQ,IAAIF,EAAM,KAAK,GAAGE,CAAI,CAAC,CACjC,EACA,WAAWA,EAAiB,CAC1B,QAAQ,IAAIF,EAAM,MAAM,GAAGE,CAAI,CAAC,CAClC,CACF,ECfA,IAAMC,GACJ,6DAGWC,GAAmBC,GAAkB,CAChD,IAAMC,EAAQD,EAAM,MAAM,GAAG,EAGvBE,EAAmBD,EAAM,UAAWE,GAAMA,EAAE,WAAW,GAAG,CAAC,EAE7DC,EAAUH,EAAMA,EAAM,OAAS,CAAC,EAKpC,OAJIA,EAAM,UAAWE,GAAMA,EAAE,WAAW,GAAG,CAAC,IAAM,KAChDC,EAAUH,EAAM,MAAMC,CAAgB,EAAE,KAAK,GAAG,GAG9CF,IAAU,KAAOF,GAAiB,KAAKM,GAAW,EAAE,EAC/C,GAEA,+EAEX,ECpBO,IAAMC,GAAuBC,GAC9BA,EAAM,WAAW,GAAG,GAAKA,EAAM,WAAW,GAAG,EACxC,2CAEA,GLgCX,IAAMC,EAA6B,CACjC,QAASC,EACT,SAAU,CAAC,WAAY,SAAU,WAAY,MAAM,EACnD,MAAO,CACL,MAAO,GACP,UAAW,GACX,QAAS,GACT,GAAI,GACJ,SAAU,GACV,KAAM,GACN,OAAQ,GACR,SAAU,GACV,YAAa,IACf,CACF,EAEaC,GAAS,SAAY,CAChC,IAAMC,EAAaH,EAEbI,EAAU,IAAIC,GAAQ,EAAE,KAAKC,CAAa,EAIhDF,EACG,YAAY,uDAAuD,EACnE,SACC,QACA,6EACF,EACC,OACC,UACA,0EACA,EACF,EACC,OACC,cACA,2EACA,EACF,EACC,OACC,gBACA,uEACA,EACF,EAMC,OAAO,OAAQ,uCAAwC,EAAK,EAE5D,OACC,uBACA,0GACCG,GAAU,CAAC,CAACA,GAASA,IAAU,OAClC,EAEC,OACC,uBACA,yGACCA,GAAU,CAAC,CAACA,GAASA,IAAU,OAClC,EAEC,OACC,qBACA,oGACCA,GAAU,CAAC,CAACA,GAASA,IAAU,OAClC,EAEC,OACC,mBACA,kGACCA,GAAU,CAAC,CAACA,GAASA,IAAU,OAClC,EAEC,OACC,qBACA,uDACAP,EAAe,MAAM,WACvB,EAEC,QAAQQ,EAAW,EAAG,gBAAiB,4BAA4B,EACnE,YACC,WACA;AAAA,gCAAmCC,GAChC,IAAI,SAAS,EACb,KACC,UACF,oEAAoEA,GACnE,IAAI,SAAS,EACb,UAAU,iBAAiB;AAAA,CAChC,EACC,MAAM,QAAQ,IAAI,EAGjB,QAAQ,IAAI,uBAAuB,WAAW,QAAQ,GACxDC,EAAO,KAAK;AAAA;AAAA;AAAA,yDAGyC,EAIvD,IAAMC,EAAkBP,EAAQ,KAAK,CAAC,EAClCO,IACFR,EAAW,QAAUQ,GAGvBR,EAAW,MAAQC,EAAQ,KAAK,EAGhC,IAAIQ,EAAS,GACTT,EAAW,MAAM,KACnBS,EAAS,GACTT,EAAW,SAAW,CAAC,EACnBA,EAAW,MAAM,MAAMA,EAAW,SAAS,KAAK,MAAM,EACtDA,EAAW,MAAM,UAAUA,EAAW,SAAS,KAAK,UAAU,EAC9DA,EAAW,MAAM,QAAQA,EAAW,SAAS,KAAK,QAAQ,EAC1DA,EAAW,MAAM,UAAUA,EAAW,SAAS,KAAK,UAAU,GAIpE,GAAI,CACF,GAAI,QAAQ,IAAI,cAAc,YAAY,EAAE,SAAS,QAAQ,EAAG,CAC9DO,EAAO,KAAK;AAAA;AAAA,gIAE8G,EAE1H,IAAMG,EAAQ,IAAI,MAAM,6BAA6B,EAErD,MAACA,EAAc,WAAa,GACtBA,EAKJ,CAACV,EAAW,MAAM,SAAW,CAACS,IAC3BD,IACHR,EAAW,QAAU,MAAMW,GAAc,GAG3C,MAAMC,GAAe,EACrBZ,EAAW,SAAW,MAAMa,GAAe,EACtCb,EAAW,MAAM,QACpBA,EAAW,MAAM,MAAQ,CAAE,MAAMc,GAAU,GAGxCd,EAAW,MAAM,YACpBA,EAAW,MAAM,UAAY,CAAE,MAAMe,GAAc,GAGrDf,EAAW,MAAM,YAAc,MAAMgB,GAAkB,EAE3D,OAASC,EAAP,CAKA,GAAIA,aAAe,OAAUA,EAAY,WAAY,CACnDV,EAAO,KAAK;AAAA,IACdJ,oDAAgE,EAE9D,GAAM,CAAE,eAAAe,CAAe,EAAI,MAAMC,EAAS,OAEvC,CACD,KAAM,iBACN,KAAM,UACN,QAAS,yCACT,QAAS,EACX,CAAC,EAEID,IACHX,EAAO,KAAK,YAAY,EACxB,QAAQ,KAAK,CAAC,GAGhBA,EAAO,KAAK,uCAAuCP,EAAW,SAAS,MAEvE,OAAMiB,CAEV,CAEA,OAAOjB,CACT,EAEMW,GAAgB,SAA6B,CACjD,GAAM,CAAE,QAAAS,CAAQ,EAAI,MAAMD,EAAS,OAAoC,CACrE,KAAM,UACN,KAAM,QACN,QAAS,oCACT,QAAStB,EAAe,QACxB,SAAUwB,GACV,YAAcC,GACLA,EAAM,KAAK,CAEtB,CAAC,EAED,OAAOF,CACT,EAEMR,GAAiB,SAA2B,CAChD,GAAM,CAAE,SAAAW,CAAS,EAAI,MAAMJ,EAAS,OAA6B,CAC/D,KAAM,WACN,KAAM,OACN,QAAS,8CACT,QAAS,CACP,CAAE,KAAM,aAAc,MAAO,aAAc,MAAO,YAAa,EAC/D,CAAE,KAAM,aAAc,MAAO,aAAc,MAAO,YAAa,CACjE,EACA,QAAS,YACX,CAAC,EAEGI,IAAa,aACfhB,EAAO,MAAM,2CAA2C,EAExDA,EAAO,QAAQ,gCAAgC,CAEnD,EAEMM,GAAiB,SAA0C,CAC/D,GAAM,CAAE,SAAAW,CAAS,EAAI,MAAML,EAAS,OAAqC,CACvE,KAAM,WACN,KAAM,WACN,QAAS,2CACT,QAASM,GACN,OAAQC,GAAQA,IAAQ,cAAc,EACtC,IAAKC,IAAa,CACjB,KAAMA,EACN,QAAS,EACX,EAAE,CACN,CAAC,EAED,OAAOH,CACT,EAEMV,GAAY,SAA8B,CAC9C,GAAM,CAAE,IAAAc,CAAI,EAAI,MAAMT,EAAS,OAAyB,CACtD,KAAM,MACN,KAAM,UACN,QAAS,mCACT,QAAS,EACX,CAAC,EAED,OAAIS,EACFrB,EAAO,QAAQ,oCAAoC,EAEnDA,EAAO,KAAK,wDAAwD,EAG/DqB,CACT,EAEMb,GAAgB,SAA8B,CAClD,IAAMc,EAAaC,EAAkB,EAE/B,CAAE,QAAAC,CAAQ,EAAI,MAAMZ,EAAS,OAA6B,CAC9D,KAAM,UACN,KAAM,UACN,QACE,6BAA6BU,KAC5BA,IAAe,OAAS,KAAO,cAClC,QAAS,EACX,CAAC,EAED,OAAIE,EACFxB,EAAO,QAAQ,kDAAkD,EAE7DsB,IAAe,OACjBtB,EAAO,KACL,4BAA4BsB,uCAC9B,EAEAtB,EAAO,KACL,4BAA4BsB,+CAC9B,EAIGE,CACT,EAEMf,GAAoB,SAA6B,CACrD,GAAM,CAAE,YAAAgB,CAAY,EAAI,MAAMb,EAAS,OAAsC,CAC3E,KAAM,cACN,KAAM,QACN,QAAS,+CACT,QAAStB,EAAe,MAAM,YAC9B,SAAUoC,GACV,YAAcX,GACLA,EAAM,KAAK,CAEtB,CAAC,EAED,OAAOU,CACT,EMzUA,OAAOE,OAAU,OCGjB,OAAOC,OAAW,QAClB,OAAOC,OAAS,MAOT,IAAMC,GAAmBC,GAAoC,CAClE,GAAM,CAAE,SAAAC,CAAS,EAAID,EACrBE,EAAO,KAAK,uBAAuB,EAEnC,OAAW,CAACC,EAAMC,CAAO,IAAK,OAAO,QAAQH,CAAQ,EACnD,GAAIG,EAAQ,MAAO,CACjB,IAAMC,EAAUC,GAAI,iBAAiBH,MAAS,EAAE,MAAM,EACtDC,EAAQ,UAAUJ,CAAO,EACzBK,EAAQ,QACNE,GAAM,MACJ,sCAAsCA,GAAM,MAAM,KAAKJ,CAAI,GAC7D,CACF,EAIJD,EAAO,KAAK,EAAE,CAChB,EC7BA,OAAOM,MAAU,OACjB,OAAOC,MAAW,QAClB,OAAOC,MAAQ,WACf,OAAOC,OAAc,WACrB,OAAOC,OAAS,MAMT,IAAMC,GAAkB,MAAO,CACpC,YAAAC,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,CACF,IAAwB,CACtB,IAAMC,EAASC,EAAK,KAAKC,EAAU,eAAe,EAE7CH,EAGHI,EAAO,KAAK,EAAE,EAFdA,EAAO,KAAK;AAAA,SAAYC,EAAM,KAAK,KAAKN,CAAU;AAAA,CAAK,EAKzD,IAAMO,EAAUC,GAAI,mBAAmBT;AAAA,CAAiB,EAAE,MAAM,EAEhE,GAAIU,EAAG,WAAWV,CAAU,EAC1B,GAAIU,EAAG,YAAYV,CAAU,EAAE,SAAW,EACpCD,IAAgB,KAClBS,EAAQ,KACN,GAAGD,EAAM,KAAK,KACZR,CACF;AAAA,CACF,MACG,CACLS,EAAQ,eAAe,EACvB,GAAM,CAAE,aAAAG,CAAa,EAAI,MAAMC,GAAS,OAErC,CACD,KAAM,eACN,KAAM,OACN,QAAS,GAAGL,EAAM,UAAU,KAAK,UAAU,KAAKA,EAAM,KAAK,KACzDR,CACF,mEACA,QAAS,CACP,CACE,KAAM,mCACN,MAAO,QACP,MAAO,OACT,EACA,CACE,KAAM,gDACN,MAAO,QACP,MAAO,OACT,EACA,CACE,KAAM,wDACN,MAAO,YACP,MAAO,WACT,CACF,EACA,QAAS,OACX,CAAC,EACGY,IAAiB,UACnBH,EAAQ,KAAK,0BAA0B,EACvC,QAAQ,KAAK,CAAC,GAGhB,IAAMK,EACJF,IAAiB,QACb,sBACA,8BAEA,CAAE,oBAAAG,CAAoB,EAAI,MAAMF,GAAS,OAE5C,CACD,KAAM,sBACN,KAAM,UACN,QAAS,4BAA4BC,KACrC,QAAS,EACX,CAAC,EAEIC,IACHN,EAAQ,KAAK,0BAA0B,EACvC,QAAQ,KAAK,CAAC,GAGZG,IAAiB,UACnBH,EAAQ,KACN,YAAYD,EAAM,KAAK,KAAKR,CAAW;AAAA,CACzC,EACAW,EAAG,aAAaV,CAAU,GAKhCQ,EAAQ,MAAM,EAEdE,EAAG,SAASP,EAAQH,CAAU,EAC9BU,EAAG,WACDN,EAAK,KAAKJ,EAAY,YAAY,EAClCI,EAAK,KAAKJ,EAAY,YAAY,CACpC,EAEA,IAAMe,EACJhB,IAAgB,IAAM,MAAQQ,EAAM,KAAK,KAAKR,CAAW,EAE3DS,EAAQ,QACN,GAAGO,KAAkBR,EAAM,MAAM,0BAA0B;AAAA,CAC7D,CACF,EC7GA,OAAOS,MAAU,OACjB,OAAOC,OAAQ,WAOR,IAAMC,GAAgB,CAAC,CAC5B,WAAAC,EACA,SAAAC,CACF,IAA8B,CAC5B,IAAMC,EAAaC,EAAK,KAAKC,EAAU,gCAAgC,EAEjEC,EAAYJ,EAAS,KAAK,MAC1BK,EAAgBL,EAAS,SAAS,MAEpCM,EAAU,GASd,GARID,GAAiBD,EACnBE,EAAU,qBACDD,GAAiB,CAACD,EAC3BE,EAAU,gBACD,CAACD,GAAiBD,IAC3BE,EAAU,iBAGRA,IAAY,GAAI,CAClB,IAAMC,EAASL,EAAK,KAAKD,EAAYK,CAAO,EACtCE,EAAUN,EAAK,KAAKH,EAAY,oBAAoB,EAC1DU,GAAG,SAASF,EAAQC,CAAO,EAE/B,EAGaE,GAAkB,CAAC,CAC9B,WAAAX,EACA,SAAAC,CACF,IAA8B,CAC5B,IAAMW,EAAeT,EAAK,KAAKC,EAAU,iCAAiC,EAEpEC,EAAYJ,EAAS,KAAK,MAC1BY,EAAUZ,EAAS,SAAS,MAC5Ba,EAAYb,EAAS,SAAS,MAEhCc,EAAY,GAahB,GAZIV,GAAaQ,GAAWC,EAC1BC,EAAY,wBACHV,GAAa,CAACQ,GAAWC,EAClCC,EAAY,qBACHV,GAAaQ,EACtBE,EAAY,mBACHV,GAAa,CAACQ,EACvBE,EAAY,gBACH,CAACV,GAAaQ,IACvBE,EAAY,eAGVA,IAAc,GAAI,CACpB,IAAMC,EAAWb,EAAK,KAAKS,EAAcG,CAAS,EAC5CE,EAAYd,EAAK,KAAKH,EAAY,qBAAqB,EAC7DU,GAAG,SAASM,EAAUC,CAAS,EAEnC,EHjDO,IAAMC,GAAgB,MAAO,CAClC,YAAAC,EACA,SAAAC,EACA,UAAAC,CACF,IAA4B,CAC1B,IAAMC,EAAaC,EAAkB,EAC/BC,EAAaC,GAAK,QAAQ,QAAQ,IAAI,EAAGN,CAAW,EAG1D,aAAMO,GAAgB,CACpB,YAAAP,EACA,WAAAK,EACA,WAAAF,EACA,UAAAD,CACF,CAAC,EAGDM,GAAgB,CACd,WAAAH,EACA,WAAAF,EACA,SAAAF,EACA,UAAAC,CACF,CAAC,EAGDO,GAAc,CAAE,WAAAJ,EAAY,SAAAJ,CAAS,CAAC,EACtCS,GAAgB,CAAE,WAAAL,EAAY,SAAAJ,CAAS,CAAC,EAEjCI,CACT,EI3CA,OAAOM,MAAW,QAClB,OAAS,YAAAC,MAAgB,gBACzB,OAAS,SAAAC,MAAa,QACtB,OAAOC,OAAQ,WACf,OAAOC,OAAc,WACrB,OAAOC,OAAS,MAChB,OAAOC,MAAU,OAGjB,IAAMC,GAAkBC,GAAyB,CAC/C,GAAI,CACF,OAAAC,EAAS,gBAAiB,CAAE,IAAKD,CAAI,CAAC,EAC/B,EACT,MAAE,CACA,MAAO,EACT,CACF,EAGME,GAAiBF,GACdG,GAAG,WAAWC,EAAK,KAAKJ,EAAK,MAAM,CAAC,EAIvCK,GAAkB,MAAOL,GAAkC,CAC/D,GAAI,CAEF,aAAMM,EAAM,MAAO,CAAC,YAAa,uBAAuB,EAAG,CACzD,IAAKN,EACL,OAAQ,QACV,CAAC,EACM,EACT,MAAE,CAEA,MAAO,EACT,CACF,EAEMO,GAAgB,IAAM,CAE1B,IAAMC,EADSP,EAAS,eAAe,EAAE,SAAS,EAAE,KAAK,EAC5B,MAAM,GAAG,EAAE,CAAC,EACnCQ,EAAQD,GAAe,MAAM,GAAG,EAAE,CAAC,EACnCE,EAAQF,GAAe,MAAM,GAAG,EAAE,CAAC,EACzC,MAAO,CAAE,MAAO,OAAOC,CAAK,EAAG,MAAO,OAAOC,CAAK,CAAE,CACtD,EAGMC,GAAmB,IACRV,EAAS,qDAAqD,EAC1E,SAAS,EACT,KAAK,EAMGW,GAAgB,MAAOC,GAAuB,CAGzD,GAFAC,EAAO,KAAK,qBAAqB,EAE7B,CAACf,GAAec,CAAU,EAAG,CAC/BC,EAAO,KAAK,oDAAoD,EAChE,OAGF,IAAMC,EAAUC,GAAI;AAAA,CAA8B,EAAE,MAAM,EAEpDC,EAASf,GAAcW,CAAU,EACjCK,EAAW,MAAMb,GAAgBQ,CAAU,EAC3CM,EAAUf,EAAK,MAAMS,CAAU,EAAE,KAEvC,GAAIK,GAAYD,EAAQ,CAEtBF,EAAQ,KAAK,EACb,GAAM,CAAE,aAAAK,CAAa,EAAI,MAAMC,GAAS,OAErC,CACD,KAAM,eACN,KAAM,UACN,QAAS,GAAGC,EAAM,UAAU,KAC1B,UACF,oCAAoCH,+GACpC,QAAS,EACX,CAAC,EACD,GAAI,CAACC,EAAc,CACjBL,EAAQ,KAAK,8BAA8B,EAC3C,OAGFZ,GAAG,WAAWC,EAAK,KAAKS,EAAY,MAAM,CAAC,UAClCK,GAAY,CAACD,EAAQ,CAE9BF,EAAQ,KAAK,EACb,GAAM,CAAE,uBAAAQ,CAAuB,EAAI,MAAMF,GAAS,OAE/C,CACD,KAAM,yBACN,KAAM,UACN,QAAS,GAAGC,EAAM,UAAU,KAC1B,UACF,MAAMH,8GACN,QAAS,EACX,CAAC,EACD,GAAI,CAACI,EAAwB,CAC3BR,EAAQ,KAAK,8BAA8B,EAC3C,QAKJ,GAAI,CACF,IAAMS,EAAab,GAAiB,EAG9B,CAAE,MAAAF,EAAO,MAAAC,CAAM,EAAIH,GAAc,EACnCE,EAAQ,GAAKC,EAAQ,IACvB,MAAMJ,EAAM,MAAO,CAAC,MAAM,EAAG,CAAE,IAAKO,CAAW,CAAC,EAChD,MAAMP,EAAM,MAAO,CAAC,SAAU,KAAMkB,CAAU,EAAG,CAAE,IAAKX,CAAW,CAAC,GAEpE,MAAMP,EAAM,MAAO,CAAC,OAAQ,oBAAoBkB,GAAY,EAAG,CAC7D,IAAKX,CACP,CAAC,EAEH,MAAMP,EAAM,MAAO,CAAC,MAAO,GAAG,EAAG,CAAE,IAAKO,CAAW,CAAC,EACpDE,EAAQ,QACN,GAAGO,EAAM,MAAM,qCAAqC,KAAKA,EAAM,MAAM,KACnE,KACF;AAAA,CACF,CACF,MAAE,CAEAP,EAAQ,KACN,GAAGO,EAAM,KAAK,IACZ,SACF;AAAA,CACF,CACF,CACF,ECxIA,OAAOG,MAAQ,KACf,OAAOC,OAAU,OAEjB,SAASC,GACPC,EACAC,EACAC,EACM,CACQL,EAAG,YAAYG,CAAa,EAEpC,QAASG,GAAS,CACtB,IAAMC,EAAWN,GAAK,KAAKE,EAAeG,CAAI,EAC9C,GAAIN,EAAG,SAASO,CAAQ,EAAE,YAAY,EACpCL,GAAmBK,EAAUH,EAAQC,CAAW,MAC3C,CAEL,IAAMG,EADOR,EAAG,aAAaO,EAAU,MAAM,EACpB,QAAQ,IAAI,OAAOH,EAAQ,GAAG,EAAGC,CAAW,EACrEL,EAAG,cAAcO,EAAUC,EAAa,MAAM,EAElD,CAAC,CACH,CAEO,IAAMC,GAAiB,CAACC,EAAoBC,IAAwB,CACzE,IAAMC,EAAwBD,EAC3B,QAAQ,MAAO,EAAE,EACjB,QAAQ,SAAU,KAAK,EAG1BT,GAAmBQ,EAAY,KAAME,CAAqB,CAC5D,ECvBO,IAAMC,GAAe,CAAC,CAC3B,YAAAC,EAAcC,EACd,SAAAC,EACA,UAAAC,CACF,IAAwE,CACtE,IAAMC,EAAaC,EAAkB,EAErCC,EAAO,KAAK,aAAa,EACzBN,IAAgB,KAAOM,EAAO,KAAK,QAAQN,GAAa,EACpDG,IAEEC,IAAe,OACjBE,EAAO,KAAK,KAAKF,GAAY,EAE7BE,EAAO,KAAK,KAAKF,WAAoB,GAIrCF,GAAU,OAAO,OACnBI,EAAO,KACL,KAAKF,IAAe,MAAQ,MAAQA,kBACtC,EAGFE,EAAO,KAAK,KAAKF,IAAe,MAAQ,UAAYA,OAAgB,CACtE,EC/BA,OAAOG,OAAgB,OAiBhB,IAAMC,GAAoBC,GAAkB,CACjD,IAAMC,EAAQD,EAAM,MAAM,GAAG,EAEzBE,EAAUD,EAAMA,EAAM,OAAS,CAAC,EAGpC,GAAIC,IAAY,IAAK,CACnB,IAAMC,EAAYL,GAAW,QAAQ,QAAQ,IAAI,CAAC,EAClDI,EAAUJ,GAAW,SAASK,CAAS,EAIzC,IAAMC,EAAmBH,EAAM,UAAWI,GAAMA,EAAE,WAAW,GAAG,CAAC,EAC7DJ,EAAM,UAAWI,GAAMA,EAAE,WAAW,GAAG,CAAC,IAAM,KAChDH,EAAUD,EAAM,MAAMG,CAAgB,EAAE,KAAK,GAAG,GAGlD,IAAME,EAAOL,EAAM,OAAQI,GAAM,CAACA,EAAE,WAAW,GAAG,CAAC,EAAE,KAAK,GAAG,EAE7D,MAAO,CAACH,EAASI,CAAI,CACvB,ECrCA,OAAOC,OAAc,kBAKrB,IAAMC,GAAkB,CACtB,KAAM,UACN,KAAM,UACN,MAAO,UACP,QAAS,UACT,IAAK,UACL,OAAQ,SACV,EAEaC,GAAc,IAAM,CAC/B,IAAMC,EAAaC,GAAS,OAAO,OAAOH,EAAe,CAAC,EAGpDI,EAAaC,EAAkB,GACjCD,IAAe,QAAUA,IAAe,SAC1C,QAAQ,IAAI,EAAE,EAEhB,QAAQ,IAAIF,EAAW,UAAUI,CAAU,CAAC,CAC9C,ECvBA,OAAS,YAAAC,OAAgB,gBAsCzB,OAAOC,OAAW,QAlCX,IAAMC,GAAwBC,GAAuB,CAC1D,IAAMC,EAAiBC,EAAW,EAK9BD,EAAe,SAAS,MAAM,GAChCE,EAAO,KAAK,kDAAkD,EAC9DA,EAAO,KAAK,yCAAyC,GAC5CF,EAAe,SAAS,MAAM,GACvCE,EAAO,KACL,mFACF,EACAA,EAAO,KAAK,4CAA4C,GAC/CF,IAAmBD,IAC5BG,EAAO,KAAK,uDAAuD,EACnEA,EAAO,KACL,kBACAF,EAAiB,IACjB,sCACAD,CACF,EACAG,EAAO,KAAK,8DAA8D,GAE5E,QAAQ,IAAI,EAAE,CAChB,EAeA,SAASC,IAAyC,CAChD,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCR,GACG,IACC,+DACCS,GAAQ,CACP,GAAIA,EAAI,aAAe,IAAK,CAC1B,IAAIC,EAAO,GACXD,EAAI,GAAG,OAASE,GAAUD,GAAQC,CAAK,EACvCF,EAAI,GAAG,MAAO,IAAM,CAClBF,EAAS,KAAK,MAAMG,CAAI,EAAmB,MAAM,CACnD,CAAC,OAEDF,EAAO,CAEX,CACF,EACC,GAAG,QAAS,IAAM,CAEjBA,EAAO,CACT,CAAC,CACL,CAAC,CACH,CAEO,IAAMI,GAAgB,IAE3BN,GAAsB,EAAE,MAAM,IAAM,CAClC,GAAI,CACF,OAAOO,GAAS,gCAAgC,EAAE,SAAS,EAAE,KAAK,CACpE,MAAE,CACA,OAAO,IACT,CACF,CAAC,EC5EH,OAAOC,OAAW,QAClB,OAAS,SAAAC,MAAa,QACtB,OAAOC,MAAuB,MAY9B,IAAMC,GAAoB,MACxBC,EACAC,IACwB,CACxB,OAAQD,EAAY,CAElB,IAAK,MACH,aAAME,EAAMF,EAAY,CAAC,SAAS,EAAG,CACnC,IAAKC,EACL,OAAQ,SACV,CAAC,EAEM,KAET,IAAK,OACH,IAAME,EAAcC,EAAI,yBAAyB,EAAE,MAAM,EACnDC,EAAiBH,EAAMF,EAAY,CAAC,SAAS,EAAG,CACpD,IAAKC,EACL,OAAQ,MACV,CAAC,EAED,aAAM,IAAI,QAAc,CAACK,EAAKC,IAAQ,CACpCF,EAAe,QAAQ,GAAG,OAASG,GAAiB,CAClD,IAAMC,EAAOD,EAAK,SAAS,EAEvBC,EAAK,SAAS,UAAU,IAC1BN,EAAY,KAAOM,EAAK,SAAS,GAAG,EAChCA,EAAK,MAAM,KAAK,EAAE,CAAC,GAAK,GACxBA,EAER,CAAC,EACDJ,EAAe,GAAG,QAAUK,GAAMH,EAAIG,CAAC,CAAC,EACxCL,EAAe,GAAG,QAAS,IAAMC,EAAI,CAAC,CACxC,CAAC,EAEMH,EACT,IAAK,OACH,IAAMQ,EAAcP,EAAI,iBAAiB,EAAE,MAAM,EAC3CQ,EAAiBV,EAAMF,EAAY,CAAC,EAAG,CAC3C,IAAKC,EACL,OAAQ,MACV,CAAC,EAED,aAAM,IAAI,QAAc,CAACK,EAAKC,IAAQ,CACpCK,EAAe,QAAQ,GAAG,OAASJ,GAAiB,CAClDG,EAAY,KAAOH,EAAK,SAAS,CACnC,CAAC,EACDI,EAAe,GAAG,QAAUF,GAAMH,EAAIG,CAAC,CAAC,EACxCE,EAAe,GAAG,QAAS,IAAMN,EAAI,CAAC,CACxC,CAAC,EAEMK,CACX,CACF,EAGaE,GAAsB,MAAO,CAAE,WAAAZ,CAAW,IAAe,CACpEa,EAAO,KAAK,4BAA4B,EACxC,IAAMd,EAAae,EAAkB,GAEd,MAAMhB,GAAkBC,EAAYC,CAAU,GAIlDG,EAAI,GAAG,QACxBY,GAAM,MAAM;AAAA,CAAwC,CACtD,CACF,E1BtDA,IAAMC,GAAO,SAAY,CACvB,IAAMC,EAAa,MAAMC,GAAc,EACvCC,GAAY,EACZF,GAAcG,GAAqBH,CAAU,EAE7C,GAAM,CACJ,QAAAI,EACA,SAAAC,EACA,MAAO,CAAE,MAAAC,EAAO,UAAAC,EAAW,YAAAC,CAAY,CACzC,EAAI,MAAMC,GAAO,EAEXC,EAAcC,GAAqBN,CAAQ,EAG3C,CAACO,EAAeC,CAAM,EAAIC,GAAiBV,CAAO,EAElDW,EAAa,MAAMC,GAAc,CACrC,YAAaH,EACb,SAAUH,EACV,YAAaF,EACb,UAAAD,CACF,CAAC,EAGKU,EAAUC,EAAG,aACjBC,EAAK,KAAKJ,EAAY,cAAc,CACtC,EACAE,EAAQ,KAAOL,EACfK,EAAQ,aAAe,CAAE,YAAaG,EAAW,CAAE,EACnDF,EAAG,cAAcC,EAAK,KAAKJ,EAAY,cAAc,EAAGE,EAAS,CAC/D,OAAQ,CACV,CAAC,EAGGT,IAAgB,MAClBa,GAAeN,EAAYP,CAAW,EAGnCD,GACH,MAAMe,GAAoB,CAAE,WAAAP,CAAW,CAAC,EAI1CG,EAAG,WACDC,EAAK,KAAKJ,EAAY,eAAe,EACrCI,EAAK,KAAKJ,EAAY,eAAe,CACvC,EAEKT,GACH,MAAMiB,GAAcR,CAAU,EAGhCS,GAAa,CAAE,YAAaX,EAAQ,SAAUH,EAAa,UAAAH,CAAU,CAAC,EAEtE,QAAQ,KAAK,CAAC,CAChB,EAEAR,GAAK,EAAE,MAAO0B,GAAQ,CACpBC,EAAO,MAAM,0BAA0B,EACnCD,aAAe,MACjBC,EAAO,MAAMD,CAAG,GAEhBC,EAAO,MACL,+EACF,EACA,QAAQ,IAAID,CAAG,GAEjB,QAAQ,KAAK,CAAC,CAChB,CAAC","names":["path","fs","path","fs","path","fileURLToPath","__filename","distPath","PKG_ROOT","TITLE_TEXT","DEFAULT_APP_NAME","CREATE_T3_APP","envVariablesInstaller","projectDir","packages","usingAuth","usingPrisma","envContent","getEnvContent","envFile","envSchemaSrc","path","PKG_ROOT","envSchemaDest","fs","envDest","envExampleDest","exampleEnvContent","content","path","fs","path","fs","dependencyVersionMap","sortPackageJson","addPackageDependency","opts","dependencies","devMode","projectDir","pkgJson","fs","path","pkgName","version","dependencyVersionMap","sortedPkgJson","nextAuthInstaller","projectDir","packages","usingPrisma","deps","addPackageDependency","extrasDir","path","PKG_ROOT","apiHandlerFile","apiHandlerSrc","apiHandlerDest","authConfigSrc","authConfigDest","fs","path","fs","prismaInstaller","projectDir","packages","addPackageDependency","extrasDir","path","PKG_ROOT","schemaSrc","schemaDest","clientSrc","clientDest","packageJsonPath","packageJsonContent","fs","fs","path","tailwindInstaller","projectDir","addPackageDependency","extrasDir","path","PKG_ROOT","twCfgSrc","twCfgDest","postcssCfgSrc","postcssCfgDest","prettierSrc","prettierDest","cssSrc","cssDest","fs","indexModuleCss","fs","path","trpcInstaller","projectDir","packages","addPackageDependency","usingAuth","usingPrisma","extrasDir","path","PKG_ROOT","apiHandlerSrc","apiHandlerDest","utilsSrc","utilsDest","trpcFile","trpcSrc","trpcDest","rootRouterSrc","rootRouterDest","exampleRouterFile","exampleRouterSrc","exampleRouterDest","fs","availablePackages","buildPkgInstallerMap","packages","nextAuthInstaller","prismaInstaller","tailwindInstaller","trpcInstaller","envVariablesInstaller","chalk","Command","inquirer","path","fs","getVersion","packageJsonPath","path","PKG_ROOT","fs","getUserPkgManager","userAgent","chalk","logger","args","validationRegExp","validateAppName","input","paths","indexOfDelimiter","p","appName","validateImportAlias","input","defaultOptions","DEFAULT_APP_NAME","runCli","cliResults","program","Command","CREATE_T3_APP","value","getVersion","chalk","logger","cliProvidedName","CIMode","error","promptAppName","promptLanguage","promptPackages","promptGit","promptInstall","promptImportAlias","err","shouldContinue","inquirer","appName","validateAppName","input","language","packages","availablePackages","pkg","pkgName","git","pkgManager","getUserPkgManager","install","importAlias","validateImportAlias","path","chalk","ora","installPackages","options","packages","logger","name","pkgOpts","spinner","ora","chalk","path","chalk","fs","inquirer","ora","scaffoldProject","projectName","projectDir","pkgManager","noInstall","srcDir","path","PKG_ROOT","logger","chalk","spinner","ora","fs","overwriteDir","inquirer","overwriteAction","confirmOverwriteDir","scaffoldedName","path","fs","selectAppFile","projectDir","packages","appFileDir","path","PKG_ROOT","usingTRPC","usingNextAuth","appFile","appSrc","appDest","fs","selectIndexFile","indexFileDir","usingTw","usingAuth","indexFile","indexSrc","indexDest","createProject","projectName","packages","noInstall","pkgManager","getUserPkgManager","projectDir","path","scaffoldProject","installPackages","selectAppFile","selectIndexFile","chalk","execSync","execa","fs","inquirer","ora","path","isGitInstalled","dir","execSync","isRootGitRepo","fs","path","isInsideGitRepo","execa","getGitVersion","gitVersionTag","major","minor","getDefaultBranch","initializeGit","projectDir","logger","spinner","ora","isRoot","isInside","dirName","overwriteGit","inquirer","chalk","initializeChildGitRepo","branchName","fs","path","replaceTextInFiles","directoryPath","search","replacement","file","filePath","updatedData","setImportAlias","projectDir","importAlias","normalizedImportAlias","logNextSteps","projectName","DEFAULT_APP_NAME","packages","noInstall","pkgManager","getUserPkgManager","logger","pathModule","parseNameAndPath","input","paths","appName","parsedCwd","indexOfDelimiter","p","path","gradient","poimandresTheme","renderTitle","t3Gradient","gradient","pkgManager","getUserPkgManager","TITLE_TEXT","execSync","https","renderVersionWarning","npmVersion","currentVersion","getVersion","logger","checkForLatestVersion","resolve","reject","res","body","data","getNpmVersion","execSync","chalk","execa","ora","runInstallCommand","pkgManager","projectDir","execa","pnpmSpinner","ora","pnpmSubprocess","res","rej","data","text","e","yarnSpinner","yarnSubprocess","installDependencies","logger","getUserPkgManager","chalk","main","npmVersion","getNpmVersion","renderTitle","renderVersionWarning","appName","packages","noGit","noInstall","importAlias","runCli","usePackages","buildPkgInstallerMap","scopedAppName","appDir","parseNameAndPath","projectDir","createProject","pkgJson","fs","path","getVersion","setImportAlias","installDependencies","initializeGit","logNextSteps","err","logger"]}